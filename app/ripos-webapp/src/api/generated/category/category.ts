/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * RiPOS API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CategoryRequest,
  GetApiCategoriesParams,
  StoreResponse,
  StoreResponseMessageResponse,
  StringMessageResponse,
} from '.././models';

import getApiCategoriesMutator from '../../axiosMutator';
import postApiCategoriesMutator from '../../axiosMutator';
import getApiCategoriesIdMutator from '../../axiosMutator';
import putApiCategoriesIdMutator from '../../axiosMutator';
import deleteApiCategoriesIdMutator from '../../axiosMutator';

export const getApiCategories = (params?: GetApiCategoriesParams, signal?: AbortSignal) => {
  return getApiCategoriesMutator<StoreResponse[]>({
    url: `/api/categories`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiCategoriesQueryKey = (params?: GetApiCategoriesParams) => {
  return [`/api/categories`, ...(params ? [params] : [])] as const;
};

export const getGetApiCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCategories>>,
  TError = void,
>(
  params?: GetApiCategoriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategories>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCategoriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCategories>>> = ({ signal }) =>
    getApiCategories(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCategories>>>;
export type GetApiCategoriesQueryError = void;

export function useGetApiCategories<
  TData = Awaited<ReturnType<typeof getApiCategories>>,
  TError = void,
>(
  params: undefined | GetApiCategoriesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategories>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiCategories>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCategories<
  TData = Awaited<ReturnType<typeof getApiCategories>>,
  TError = void,
>(
  params?: GetApiCategoriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategories>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategories>>,
          TError,
          Awaited<ReturnType<typeof getApiCategories>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCategories<
  TData = Awaited<ReturnType<typeof getApiCategories>>,
  TError = void,
>(
  params?: GetApiCategoriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategories>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiCategories<
  TData = Awaited<ReturnType<typeof getApiCategories>>,
  TError = void,
>(
  params?: GetApiCategoriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategories>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiCategoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiCategories = (categoryRequest: CategoryRequest, signal?: AbortSignal) => {
  return postApiCategoriesMutator<StoreResponseMessageResponse>({
    url: `/api/categories`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: categoryRequest,
    signal,
  });
};

export const getPostApiCategoriesMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCategories>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCategories>>,
  TError,
  { data: CategoryRequest },
  TContext
> => {
  const mutationKey = ['postApiCategories'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCategories>>,
    { data: CategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiCategories(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCategoriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCategories>>
>;
export type PostApiCategoriesMutationBody = CategoryRequest;
export type PostApiCategoriesMutationError = void;

export const usePostApiCategories = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCategories>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCategories>>,
  TError,
  { data: CategoryRequest },
  TContext
> => {
  const mutationOptions = getPostApiCategoriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiCategoriesId = (id: number, signal?: AbortSignal) => {
  return getApiCategoriesIdMutator<StoreResponse>({
    url: `/api/categories/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiCategoriesIdQueryKey = (id: number) => {
  return [`/api/categories/${id}`] as const;
};

export const getGetApiCategoriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCategoriesId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoriesId>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCategoriesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCategoriesId>>> = ({ signal }) =>
    getApiCategoriesId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCategoriesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCategoriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCategoriesId>>
>;
export type GetApiCategoriesIdQueryError = void;

export function useGetApiCategoriesId<
  TData = Awaited<ReturnType<typeof getApiCategoriesId>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoriesId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getApiCategoriesId>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCategoriesId<
  TData = Awaited<ReturnType<typeof getApiCategoriesId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCategoriesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCategoriesId>>,
          TError,
          Awaited<ReturnType<typeof getApiCategoriesId>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCategoriesId<
  TData = Awaited<ReturnType<typeof getApiCategoriesId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoriesId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiCategoriesId<
  TData = Awaited<ReturnType<typeof getApiCategoriesId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCategoriesId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiCategoriesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiCategoriesId = (id: number, categoryRequest: CategoryRequest) => {
  return putApiCategoriesIdMutator<StoreResponseMessageResponse>({
    url: `/api/categories/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: categoryRequest,
  });
};

export const getPutApiCategoriesIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCategoriesId>>,
    TError,
    { id: number; data: CategoryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCategoriesId>>,
  TError,
  { id: number; data: CategoryRequest },
  TContext
> => {
  const mutationKey = ['putApiCategoriesId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCategoriesId>>,
    { id: number; data: CategoryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiCategoriesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCategoriesId>>
>;
export type PutApiCategoriesIdMutationBody = CategoryRequest;
export type PutApiCategoriesIdMutationError = void;

export const usePutApiCategoriesId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCategoriesId>>,
    TError,
    { id: number; data: CategoryRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiCategoriesId>>,
  TError,
  { id: number; data: CategoryRequest },
  TContext
> => {
  const mutationOptions = getPutApiCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteApiCategoriesId = (id: number) => {
  return deleteApiCategoriesIdMutator<StringMessageResponse>({
    url: `/api/categories/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteApiCategoriesIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiCategoriesId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCategoriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiCategoriesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCategoriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCategoriesId>>
>;

export type DeleteApiCategoriesIdMutationError = void;

export const useDeleteApiCategoriesId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCategoriesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCategoriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiCategoriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
