/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * RiPOS API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CashRegisterRequest,
  CashRegisterResponse,
  CashRegisterResponseMessageResponse,
  GetApiCashregistersParams,
  StringMessageResponse,
} from '.././models';

import getApiCashregistersMutator from '../../axiosMutator';
import postApiCashregistersMutator from '../../axiosMutator';
import getApiCashregistersIdMutator from '../../axiosMutator';
import putApiCashregistersIdMutator from '../../axiosMutator';
import deleteApiCashregistersIdMutator from '../../axiosMutator';

export const getApiCashregisters = (params?: GetApiCashregistersParams, signal?: AbortSignal) => {
  return getApiCashregistersMutator<CashRegisterResponse[]>({
    url: `/api/cashregisters`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiCashregistersQueryKey = (params?: GetApiCashregistersParams) => {
  return [`/api/cashregisters`, ...(params ? [params] : [])] as const;
};

export const getGetApiCashregistersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCashregisters>>,
  TError = void,
>(
  params?: GetApiCashregistersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregisters>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCashregistersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCashregisters>>> = ({ signal }) =>
    getApiCashregisters(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCashregisters>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCashregistersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCashregisters>>
>;
export type GetApiCashregistersQueryError = void;

export function useGetApiCashregisters<
  TData = Awaited<ReturnType<typeof getApiCashregisters>>,
  TError = void,
>(
  params: undefined | GetApiCashregistersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregisters>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashregisters>>,
          TError,
          Awaited<ReturnType<typeof getApiCashregisters>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCashregisters<
  TData = Awaited<ReturnType<typeof getApiCashregisters>>,
  TError = void,
>(
  params?: GetApiCashregistersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregisters>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashregisters>>,
          TError,
          Awaited<ReturnType<typeof getApiCashregisters>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCashregisters<
  TData = Awaited<ReturnType<typeof getApiCashregisters>>,
  TError = void,
>(
  params?: GetApiCashregistersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregisters>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiCashregisters<
  TData = Awaited<ReturnType<typeof getApiCashregisters>>,
  TError = void,
>(
  params?: GetApiCashregistersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregisters>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiCashregistersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiCashregisters = (
  cashRegisterRequest: CashRegisterRequest,
  signal?: AbortSignal
) => {
  return postApiCashregistersMutator<CashRegisterResponseMessageResponse>({
    url: `/api/cashregisters`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: cashRegisterRequest,
    signal,
  });
};

export const getPostApiCashregistersMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCashregisters>>,
    TError,
    { data: CashRegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiCashregisters>>,
  TError,
  { data: CashRegisterRequest },
  TContext
> => {
  const mutationKey = ['postApiCashregisters'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiCashregisters>>,
    { data: CashRegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiCashregisters(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiCashregistersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiCashregisters>>
>;
export type PostApiCashregistersMutationBody = CashRegisterRequest;
export type PostApiCashregistersMutationError = void;

export const usePostApiCashregisters = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiCashregisters>>,
    TError,
    { data: CashRegisterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiCashregisters>>,
  TError,
  { data: CashRegisterRequest },
  TContext
> => {
  const mutationOptions = getPostApiCashregistersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiCashregistersId = (id: number, signal?: AbortSignal) => {
  return getApiCashregistersIdMutator<CashRegisterResponse>({
    url: `/api/cashregisters/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiCashregistersIdQueryKey = (id: number) => {
  return [`/api/cashregisters/${id}`] as const;
};

export const getGetApiCashregistersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiCashregistersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregistersId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCashregistersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCashregistersId>>> = ({ signal }) =>
    getApiCashregistersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiCashregistersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCashregistersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiCashregistersId>>
>;
export type GetApiCashregistersIdQueryError = void;

export function useGetApiCashregistersId<
  TData = Awaited<ReturnType<typeof getApiCashregistersId>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregistersId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashregistersId>>,
          TError,
          Awaited<ReturnType<typeof getApiCashregistersId>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCashregistersId<
  TData = Awaited<ReturnType<typeof getApiCashregistersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregistersId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCashregistersId>>,
          TError,
          Awaited<ReturnType<typeof getApiCashregistersId>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCashregistersId<
  TData = Awaited<ReturnType<typeof getApiCashregistersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregistersId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiCashregistersId<
  TData = Awaited<ReturnType<typeof getApiCashregistersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiCashregistersId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiCashregistersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiCashregistersId = (id: number, cashRegisterRequest: CashRegisterRequest) => {
  return putApiCashregistersIdMutator<CashRegisterResponseMessageResponse>({
    url: `/api/cashregisters/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: cashRegisterRequest,
  });
};

export const getPutApiCashregistersIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCashregistersId>>,
    TError,
    { id: number; data: CashRegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiCashregistersId>>,
  TError,
  { id: number; data: CashRegisterRequest },
  TContext
> => {
  const mutationKey = ['putApiCashregistersId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiCashregistersId>>,
    { id: number; data: CashRegisterRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiCashregistersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiCashregistersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiCashregistersId>>
>;
export type PutApiCashregistersIdMutationBody = CashRegisterRequest;
export type PutApiCashregistersIdMutationError = void;

export const usePutApiCashregistersId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiCashregistersId>>,
    TError,
    { id: number; data: CashRegisterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiCashregistersId>>,
  TError,
  { id: number; data: CashRegisterRequest },
  TContext
> => {
  const mutationOptions = getPutApiCashregistersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteApiCashregistersId = (id: number) => {
  return deleteApiCashregistersIdMutator<StringMessageResponse>({
    url: `/api/cashregisters/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteApiCashregistersIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCashregistersId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiCashregistersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiCashregistersId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiCashregistersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiCashregistersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiCashregistersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiCashregistersId>>
>;

export type DeleteApiCashregistersIdMutationError = void;

export const useDeleteApiCashregistersId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiCashregistersId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiCashregistersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiCashregistersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
