/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * RiPOS API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  GenderRequest,
  GetApiGendersParams,
  StoreResponse,
  StoreResponseMessageResponse,
  StringMessageResponse,
} from '.././models';

import getApiGendersMutator from '../../axiosMutator';
import postApiGendersMutator from '../../axiosMutator';
import getApiGendersIdMutator from '../../axiosMutator';
import putApiGendersIdMutator from '../../axiosMutator';
import deleteApiGendersIdMutator from '../../axiosMutator';

export const getApiGenders = (params?: GetApiGendersParams, signal?: AbortSignal) => {
  return getApiGendersMutator<StoreResponse[]>({
    url: `/api/genders`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiGendersQueryKey = (params?: GetApiGendersParams) => {
  return [`/api/genders`, ...(params ? [params] : [])] as const;
};

export const getGetApiGendersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGenders>>,
  TError = void,
>(
  params?: GetApiGendersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGenders>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGendersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGenders>>> = ({ signal }) =>
    getApiGenders(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGenders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGendersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGenders>>>;
export type GetApiGendersQueryError = void;

export function useGetApiGenders<TData = Awaited<ReturnType<typeof getApiGenders>>, TError = void>(
  params: undefined | GetApiGendersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGenders>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGenders>>,
          TError,
          Awaited<ReturnType<typeof getApiGenders>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiGenders<TData = Awaited<ReturnType<typeof getApiGenders>>, TError = void>(
  params?: GetApiGendersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGenders>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGenders>>,
          TError,
          Awaited<ReturnType<typeof getApiGenders>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiGenders<TData = Awaited<ReturnType<typeof getApiGenders>>, TError = void>(
  params?: GetApiGendersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGenders>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiGenders<TData = Awaited<ReturnType<typeof getApiGenders>>, TError = void>(
  params?: GetApiGendersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGenders>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiGendersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiGenders = (genderRequest: GenderRequest, signal?: AbortSignal) => {
  return postApiGendersMutator<StoreResponseMessageResponse>({
    url: `/api/genders`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: genderRequest,
    signal,
  });
};

export const getPostApiGendersMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiGenders>>,
    TError,
    { data: GenderRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiGenders>>,
  TError,
  { data: GenderRequest },
  TContext
> => {
  const mutationKey = ['postApiGenders'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiGenders>>,
    { data: GenderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiGenders(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiGendersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiGenders>>>;
export type PostApiGendersMutationBody = GenderRequest;
export type PostApiGendersMutationError = void;

export const usePostApiGenders = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiGenders>>,
    TError,
    { data: GenderRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiGenders>>,
  TError,
  { data: GenderRequest },
  TContext
> => {
  const mutationOptions = getPostApiGendersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiGendersId = (id: number, signal?: AbortSignal) => {
  return getApiGendersIdMutator<StoreResponse>({
    url: `/api/genders/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetApiGendersIdQueryKey = (id: number) => {
  return [`/api/genders/${id}`] as const;
};

export const getGetApiGendersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGendersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGendersId>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGendersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiGendersId>>> = ({ signal }) =>
    getApiGendersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGendersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiGendersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiGendersId>>>;
export type GetApiGendersIdQueryError = void;

export function useGetApiGendersId<
  TData = Awaited<ReturnType<typeof getApiGendersId>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGendersId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGendersId>>,
          TError,
          Awaited<ReturnType<typeof getApiGendersId>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiGendersId<
  TData = Awaited<ReturnType<typeof getApiGendersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGendersId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiGendersId>>,
          TError,
          Awaited<ReturnType<typeof getApiGendersId>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiGendersId<
  TData = Awaited<ReturnType<typeof getApiGendersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGendersId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiGendersId<
  TData = Awaited<ReturnType<typeof getApiGendersId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiGendersId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiGendersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiGendersId = (id: number, genderRequest: GenderRequest) => {
  return putApiGendersIdMutator<StoreResponseMessageResponse>({
    url: `/api/genders/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: genderRequest,
  });
};

export const getPutApiGendersIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiGendersId>>,
    TError,
    { id: number; data: GenderRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiGendersId>>,
  TError,
  { id: number; data: GenderRequest },
  TContext
> => {
  const mutationKey = ['putApiGendersId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiGendersId>>,
    { id: number; data: GenderRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiGendersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiGendersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiGendersId>>
>;
export type PutApiGendersIdMutationBody = GenderRequest;
export type PutApiGendersIdMutationError = void;

export const usePutApiGendersId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiGendersId>>,
    TError,
    { id: number; data: GenderRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiGendersId>>,
  TError,
  { id: number; data: GenderRequest },
  TContext
> => {
  const mutationOptions = getPutApiGendersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteApiGendersId = (id: number) => {
  return deleteApiGendersIdMutator<StringMessageResponse>({
    url: `/api/genders/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteApiGendersIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiGendersId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiGendersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiGendersId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiGendersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiGendersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiGendersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiGendersId>>
>;

export type DeleteApiGendersIdMutationError = void;

export const useDeleteApiGendersId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiGendersId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiGendersId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiGendersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
