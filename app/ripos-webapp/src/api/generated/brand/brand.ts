/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * RiPOS API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  BrandRequest,
  BrandResponse,
  BrandResponseMessageResponse,
  GetApiBrandsParams,
  StringMessageResponse,
} from '.././models';

import getApiBrandsMutator from '../../axiosMutator';
import postApiBrandsMutator from '../../axiosMutator';
import getApiBrandsIdMutator from '../../axiosMutator';
import putApiBrandsIdMutator from '../../axiosMutator';
import deleteApiBrandsIdMutator from '../../axiosMutator';

export const getApiBrands = (params?: GetApiBrandsParams, signal?: AbortSignal) => {
  return getApiBrandsMutator<BrandResponse[]>({
    url: `/api/brands`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiBrandsQueryKey = (params?: GetApiBrandsParams) => {
  return [`/api/brands`, ...(params ? [params] : [])] as const;
};

export const getGetApiBrandsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBrands>>,
  TError = void,
>(
  params?: GetApiBrandsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrands>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiBrandsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBrands>>> = ({ signal }) =>
    getApiBrands(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBrands>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBrandsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBrands>>>;
export type GetApiBrandsQueryError = void;

export function useGetApiBrands<TData = Awaited<ReturnType<typeof getApiBrands>>, TError = void>(
  params: undefined | GetApiBrandsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrands>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBrands>>,
          TError,
          Awaited<ReturnType<typeof getApiBrands>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiBrands<TData = Awaited<ReturnType<typeof getApiBrands>>, TError = void>(
  params?: GetApiBrandsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrands>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBrands>>,
          TError,
          Awaited<ReturnType<typeof getApiBrands>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiBrands<TData = Awaited<ReturnType<typeof getApiBrands>>, TError = void>(
  params?: GetApiBrandsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrands>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiBrands<TData = Awaited<ReturnType<typeof getApiBrands>>, TError = void>(
  params?: GetApiBrandsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrands>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiBrandsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiBrands = (brandRequest: BrandRequest, signal?: AbortSignal) => {
  return postApiBrandsMutator<BrandResponseMessageResponse>({
    url: `/api/brands`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: brandRequest,
    signal,
  });
};

export const getPostApiBrandsMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBrands>>,
    TError,
    { data: BrandRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiBrands>>,
  TError,
  { data: BrandRequest },
  TContext
> => {
  const mutationKey = ['postApiBrands'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiBrands>>,
    { data: BrandRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiBrands(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiBrandsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiBrands>>>;
export type PostApiBrandsMutationBody = BrandRequest;
export type PostApiBrandsMutationError = void;

export const usePostApiBrands = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiBrands>>,
    TError,
    { data: BrandRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiBrands>>,
  TError,
  { data: BrandRequest },
  TContext
> => {
  const mutationOptions = getPostApiBrandsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiBrandsId = (id: number, signal?: AbortSignal) => {
  return getApiBrandsIdMutator<BrandResponse>({ url: `/api/brands/${id}`, method: 'GET', signal });
};

export const getGetApiBrandsIdQueryKey = (id: number) => {
  return [`/api/brands/${id}`] as const;
};

export const getGetApiBrandsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiBrandsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrandsId>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiBrandsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiBrandsId>>> = ({ signal }) =>
    getApiBrandsId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiBrandsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiBrandsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiBrandsId>>>;
export type GetApiBrandsIdQueryError = void;

export function useGetApiBrandsId<
  TData = Awaited<ReturnType<typeof getApiBrandsId>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrandsId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBrandsId>>,
          TError,
          Awaited<ReturnType<typeof getApiBrandsId>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiBrandsId<
  TData = Awaited<ReturnType<typeof getApiBrandsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrandsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiBrandsId>>,
          TError,
          Awaited<ReturnType<typeof getApiBrandsId>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiBrandsId<
  TData = Awaited<ReturnType<typeof getApiBrandsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrandsId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiBrandsId<
  TData = Awaited<ReturnType<typeof getApiBrandsId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiBrandsId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiBrandsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiBrandsId = (id: number, brandRequest: BrandRequest) => {
  return putApiBrandsIdMutator<BrandResponseMessageResponse>({
    url: `/api/brands/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: brandRequest,
  });
};

export const getPutApiBrandsIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBrandsId>>,
    TError,
    { id: number; data: BrandRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiBrandsId>>,
  TError,
  { id: number; data: BrandRequest },
  TContext
> => {
  const mutationKey = ['putApiBrandsId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiBrandsId>>,
    { id: number; data: BrandRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiBrandsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiBrandsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiBrandsId>>>;
export type PutApiBrandsIdMutationBody = BrandRequest;
export type PutApiBrandsIdMutationError = void;

export const usePutApiBrandsId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiBrandsId>>,
    TError,
    { id: number; data: BrandRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiBrandsId>>,
  TError,
  { id: number; data: BrandRequest },
  TContext
> => {
  const mutationOptions = getPutApiBrandsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteApiBrandsId = (id: number) => {
  return deleteApiBrandsIdMutator<StringMessageResponse>({
    url: `/api/brands/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteApiBrandsIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBrandsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiBrandsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiBrandsId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiBrandsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiBrandsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiBrandsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiBrandsId>>
>;

export type DeleteApiBrandsIdMutationError = void;

export const useDeleteApiBrandsId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiBrandsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiBrandsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiBrandsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
