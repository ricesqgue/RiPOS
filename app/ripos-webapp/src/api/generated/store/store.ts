/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * RiPOS API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  StoreRequest,
  StoreResponse,
  StoreResponseMessageResponse,
  StringMessageResponse,
} from '.././models';

import getApiStoresMutator from '../../axiosMutator';
import postApiStoresMutator from '../../axiosMutator';
import getApiStoresIdMutator from '../../axiosMutator';
import putApiStoresIdMutator from '../../axiosMutator';
import deleteApiStoresIdMutator from '../../axiosMutator';

export const getApiStores = (signal?: AbortSignal) => {
  return getApiStoresMutator<StoreResponse[]>({ url: `/api/stores`, method: 'GET', signal });
};

export const getGetApiStoresQueryKey = () => {
  return [`/api/stores`] as const;
};

export const getGetApiStoresQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiStores>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStores>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiStoresQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStores>>> = ({ signal }) =>
    getApiStores(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiStores>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiStoresQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStores>>>;
export type GetApiStoresQueryError = void;

export function useGetApiStores<
  TData = Awaited<ReturnType<typeof getApiStores>>,
  TError = void,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStores>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiStores>>,
        TError,
        Awaited<ReturnType<typeof getApiStores>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiStores<
  TData = Awaited<ReturnType<typeof getApiStores>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStores>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiStores>>,
        TError,
        Awaited<ReturnType<typeof getApiStores>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiStores<
  TData = Awaited<ReturnType<typeof getApiStores>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStores>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiStores<
  TData = Awaited<ReturnType<typeof getApiStores>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStores>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiStoresQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiStores = (storeRequest: StoreRequest, signal?: AbortSignal) => {
  return postApiStoresMutator<StoreResponseMessageResponse>({
    url: `/api/stores`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: storeRequest,
    signal,
  });
};

export const getPostApiStoresMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiStores>>,
    TError,
    { data: StoreRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiStores>>,
  TError,
  { data: StoreRequest },
  TContext
> => {
  const mutationKey = ['postApiStores'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiStores>>,
    { data: StoreRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiStores(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiStoresMutationResult = NonNullable<Awaited<ReturnType<typeof postApiStores>>>;
export type PostApiStoresMutationBody = StoreRequest;
export type PostApiStoresMutationError = void;

export const usePostApiStores = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiStores>>,
    TError,
    { data: StoreRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiStores>>,
  TError,
  { data: StoreRequest },
  TContext
> => {
  const mutationOptions = getPostApiStoresMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiStoresId = (id: number, signal?: AbortSignal) => {
  return getApiStoresIdMutator<StoreResponse>({ url: `/api/stores/${id}`, method: 'GET', signal });
};

export const getGetApiStoresIdQueryKey = (id: number) => {
  return [`/api/stores/${id}`] as const;
};

export const getGetApiStoresIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiStoresId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStoresId>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiStoresIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStoresId>>> = ({ signal }) =>
    getApiStoresId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiStoresId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiStoresIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStoresId>>>;
export type GetApiStoresIdQueryError = void;

export function useGetApiStoresId<
  TData = Awaited<ReturnType<typeof getApiStoresId>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStoresId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStoresId>>,
          TError,
          Awaited<ReturnType<typeof getApiStoresId>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiStoresId<
  TData = Awaited<ReturnType<typeof getApiStoresId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStoresId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiStoresId>>,
          TError,
          Awaited<ReturnType<typeof getApiStoresId>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiStoresId<
  TData = Awaited<ReturnType<typeof getApiStoresId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStoresId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiStoresId<
  TData = Awaited<ReturnType<typeof getApiStoresId>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiStoresId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiStoresIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiStoresId = (id: number, storeRequest: StoreRequest) => {
  return putApiStoresIdMutator<StoreResponseMessageResponse>({
    url: `/api/stores/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: storeRequest,
  });
};

export const getPutApiStoresIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiStoresId>>,
    TError,
    { id: number; data: StoreRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiStoresId>>,
  TError,
  { id: number; data: StoreRequest },
  TContext
> => {
  const mutationKey = ['putApiStoresId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiStoresId>>,
    { id: number; data: StoreRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiStoresId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiStoresIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiStoresId>>>;
export type PutApiStoresIdMutationBody = StoreRequest;
export type PutApiStoresIdMutationError = void;

export const usePutApiStoresId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiStoresId>>,
    TError,
    { id: number; data: StoreRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiStoresId>>,
  TError,
  { id: number; data: StoreRequest },
  TContext
> => {
  const mutationOptions = getPutApiStoresIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteApiStoresId = (id: number) => {
  return deleteApiStoresIdMutator<StringMessageResponse>({
    url: `/api/stores/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteApiStoresIdMutationOptions = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiStoresId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiStoresId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiStoresId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiStoresId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiStoresId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiStoresIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiStoresId>>
>;

export type DeleteApiStoresIdMutationError = void;

export const useDeleteApiStoresId = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiStoresId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiStoresId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiStoresIdMutationOptions(options);

  return useMutation(mutationOptions);
};
