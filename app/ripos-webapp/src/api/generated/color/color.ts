/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * RiPOS API
 * OpenAPI spec version: v1
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ColorRequest,
  ColorResponse,
  ColorResponseMessageResponse,
  GetApiColorsParams,
  SimpleResponse,
} from '.././models';

import getApiColorsMutator from '../../axiosMutator';
import postApiColorsMutator from '../../axiosMutator';
import getApiColorsIdMutator from '../../axiosMutator';
import putApiColorsIdMutator from '../../axiosMutator';
import deleteApiColorsIdMutator from '../../axiosMutator';

export const getApiColors = (params?: GetApiColorsParams, signal?: AbortSignal) => {
  return getApiColorsMutator<ColorResponse[]>({
    url: `/api/colors`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiColorsQueryKey = (params?: GetApiColorsParams) => {
  return [`/api/colors`, ...(params ? [params] : [])] as const;
};

export const getGetApiColorsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiColors>>,
  TError = void,
>(
  params?: GetApiColorsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColors>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiColorsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiColors>>> = ({ signal }) =>
    getApiColors(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiColors>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiColorsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiColors>>>;
export type GetApiColorsQueryError = void;

export function useGetApiColors<TData = Awaited<ReturnType<typeof getApiColors>>, TError = void>(
  params: undefined | GetApiColorsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColors>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiColors>>,
          TError,
          Awaited<ReturnType<typeof getApiColors>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiColors<TData = Awaited<ReturnType<typeof getApiColors>>, TError = void>(
  params?: GetApiColorsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColors>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiColors>>,
          TError,
          Awaited<ReturnType<typeof getApiColors>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiColors<TData = Awaited<ReturnType<typeof getApiColors>>, TError = void>(
  params?: GetApiColorsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColors>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiColors<TData = Awaited<ReturnType<typeof getApiColors>>, TError = void>(
  params?: GetApiColorsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColors>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiColorsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiColors = (colorRequest: ColorRequest, signal?: AbortSignal) => {
  return postApiColorsMutator<ColorResponseMessageResponse>({
    url: `/api/colors`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: colorRequest,
    signal,
  });
};

export const getPostApiColorsMutationOptions = <
  TError = SimpleResponse | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiColors>>,
    TError,
    { data: ColorRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiColors>>,
  TError,
  { data: ColorRequest },
  TContext
> => {
  const mutationKey = ['postApiColors'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiColors>>,
    { data: ColorRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postApiColors(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiColorsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiColors>>>;
export type PostApiColorsMutationBody = ColorRequest;
export type PostApiColorsMutationError = SimpleResponse | void;

export const usePostApiColors = <TError = SimpleResponse | void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiColors>>,
    TError,
    { data: ColorRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiColors>>,
  TError,
  { data: ColorRequest },
  TContext
> => {
  const mutationOptions = getPostApiColorsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiColorsId = (id: number, signal?: AbortSignal) => {
  return getApiColorsIdMutator<ColorResponse>({ url: `/api/colors/${id}`, method: 'GET', signal });
};

export const getGetApiColorsIdQueryKey = (id: number) => {
  return [`/api/colors/${id}`] as const;
};

export const getGetApiColorsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiColorsId>>,
  TError = void | SimpleResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColorsId>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiColorsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiColorsId>>> = ({ signal }) =>
    getApiColorsId(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiColorsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiColorsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiColorsId>>>;
export type GetApiColorsIdQueryError = void | SimpleResponse;

export function useGetApiColorsId<
  TData = Awaited<ReturnType<typeof getApiColorsId>>,
  TError = void | SimpleResponse,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColorsId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiColorsId>>,
          TError,
          Awaited<ReturnType<typeof getApiColorsId>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiColorsId<
  TData = Awaited<ReturnType<typeof getApiColorsId>>,
  TError = void | SimpleResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColorsId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiColorsId>>,
          TError,
          Awaited<ReturnType<typeof getApiColorsId>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiColorsId<
  TData = Awaited<ReturnType<typeof getApiColorsId>>,
  TError = void | SimpleResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColorsId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiColorsId<
  TData = Awaited<ReturnType<typeof getApiColorsId>>,
  TError = void | SimpleResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiColorsId>>, TError, TData>>;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiColorsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiColorsId = (id: number, colorRequest: ColorRequest) => {
  return putApiColorsIdMutator<ColorResponseMessageResponse>({
    url: `/api/colors/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: colorRequest,
  });
};

export const getPutApiColorsIdMutationOptions = <
  TError = SimpleResponse | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiColorsId>>,
    TError,
    { id: number; data: ColorRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiColorsId>>,
  TError,
  { id: number; data: ColorRequest },
  TContext
> => {
  const mutationKey = ['putApiColorsId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiColorsId>>,
    { id: number; data: ColorRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiColorsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiColorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiColorsId>>>;
export type PutApiColorsIdMutationBody = ColorRequest;
export type PutApiColorsIdMutationError = SimpleResponse | void;

export const usePutApiColorsId = <TError = SimpleResponse | void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiColorsId>>,
    TError,
    { id: number; data: ColorRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiColorsId>>,
  TError,
  { id: number; data: ColorRequest },
  TContext
> => {
  const mutationOptions = getPutApiColorsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteApiColorsId = (id: number) => {
  return deleteApiColorsIdMutator<SimpleResponse>({ url: `/api/colors/${id}`, method: 'DELETE' });
};

export const getDeleteApiColorsIdMutationOptions = <
  TError = SimpleResponse | void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiColorsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiColorsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteApiColorsId'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiColorsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiColorsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiColorsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiColorsId>>
>;

export type DeleteApiColorsIdMutationError = SimpleResponse | void;

export const useDeleteApiColorsId = <TError = SimpleResponse | void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiColorsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiColorsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiColorsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
